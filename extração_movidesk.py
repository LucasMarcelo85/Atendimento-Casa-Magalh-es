# Importa√ß√£o das bibliotecas necess√°rias para automa√ß√£o, manipula√ß√£o de arquivos e express√µes regulares
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import csv
import time
import re

# Inicializa o WebDriver do Chrome com as op√ß√µes padr√£o
print("üöÄ Iniciando o WebDriver...")
options = webdriver.ChromeOptions()
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)

# Acessa a p√°gina do formul√°rio Movidesk
print("üåê Acessando a p√°gina do Movidesk...")
driver.get("https://grupocasamagalhaes.movidesk.com/kb/form/7426/#")

# Aguarda at√© que o campo 'Servi√ßo' esteja dispon√≠vel para clique
print("‚è≥ Esperando o campo 'Servi√ßo' aparecer...")
espera = WebDriverWait(driver, 15)
dropdown_div = espera.until(
    EC.element_to_be_clickable((By.XPATH, "//div[contains(@id,'jqxWidget') and contains(@class,'jqx-widget')]"))
)

# Clica no campo 'Servi√ßo' para exibir a √°rvore de op√ß√µes
print("üñ±Ô∏è Clicando no campo 'Servi√ßo'...")
dropdown_div.click()
time.sleep(3)

# Orienta o usu√°rio a expandir manualmente todos os grupos da √°rvore
print("\nüß† AGORA √â COM VOC√ä:")
print("‚û°Ô∏è Expanda todos os grupos no navegador (n√≠veis 1, 2, 3 e 4).")
input("‚è∏Ô∏è Pressione ENTER aqui quando tudo estiver expandido...")

# Coleta todos os itens vis√≠veis da √°rvore de servi√ßos
print("üîç Coletando itens vis√≠veis...")
itens = driver.find_elements(By.CLASS_NAME, "jqx-tree-item-li")

# Inicializa listas para armazenar o caminho e a numera√ß√£o hier√°rquica
caminho = ["", "", "", ""]
numeracao = ["", "", "", ""]
dados = []

# Inicializa contadores para cada n√≠vel da hierarquia
nivel1 = nivel2 = nivel3 = nivel4 = 0

# Percorre cada item coletado da √°rvore
for item in itens:
    try:
        # Garante que o item est√° vis√≠vel na tela
        driver.execute_script("arguments[0].scrollIntoView(true);", item)
        time.sleep(0.05)

        # Extrai o n√≠vel do item pela margem esquerda (margin-left)
        estilo = item.get_attribute("style")
        match = re.search(r"margin-left:\s*(\d+)px", estilo)
        if not match:
            continue

        margin = int(match.group(1))
        nivel = margin // 18  # Cada n√≠vel aumenta 18px

        # Extrai o texto do item
        div_texto = item.find_element(By.CLASS_NAME, "jqx-tree-item")
        texto = div_texto.get_attribute("innerText").strip()

        if not texto:
            continue

        # Atualiza o caminho hier√°rquico e reseta n√≠veis inferiores
        caminho[nivel] = texto
        for i in range(nivel + 1, 4):
            caminho[i] = ""

        # Atualiza os contadores de cada n√≠vel
        if nivel == 0:
            nivel1 += 1
            nivel2 = nivel3 = nivel4 = 0
        elif nivel == 1:
            nivel2 += 1
            nivel3 = nivel4 = 0
        elif nivel == 2:
            nivel3 += 1
            nivel4 = 0
        elif nivel == 3:
            nivel4 += 1

        # Gera o c√≥digo hier√°rquico do item
        if nivel == 0:
            cod = f"{nivel1}"
        elif nivel == 1:
            cod = f"{nivel1}.{nivel2}"
        elif nivel == 2:
            cod = f"{nivel1}.{nivel2}.{nivel3}"
        elif nivel == 3:
            cod = f"{nivel1}.{nivel2}.{nivel3}.{nivel4}"
        else:
            cod = ""

        # Exibe no console o caminho e c√≥digo do item
        print(f"{cod} -", " > ".join([c for c in caminho if c]))
        # Adiciona o registro √† lista de dados
        dados.append([cod] + caminho)

    except Exception as e:
        # Em caso de erro, exibe mensagem e continua
        print(f"‚ö†Ô∏è Erro ao processar item: {e}")

# Salva os dados coletados em um arquivo CSV
print("\nüíæ Salvando em 'servicos_hierarquia.csv'...")
with open("servicos_hierarquia.csv", "w", newline="", encoding="utf-8") as arquivo:
    writer = csv.writer(arquivo)
    writer.writerow(["C√≥digo", "N√≠vel 1", "N√≠vel 2", "N√≠vel 3", "N√≠vel 4"])
    writer.writerows(dados)

# Exibe mensagem final com o total de registros extra√≠dos e encerra o navegador
print(f"\n‚úÖ Finalizado! Total extra√≠do: {len(dados)} registros")
driver.quit()